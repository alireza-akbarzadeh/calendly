/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/auth'
import { Route as IndexImport } from './routes/index'
import { Route as AuthSignUpImport } from './routes/auth.sign-up'
import { Route as AuthSignInImport } from './routes/auth.sign-in'
import { Route as userUserImport } from './routes/(user)/user'
import { Route as adminWorkflowsImport } from './routes/(admin)/workflows'
import { Route as adminRoutingImport } from './routes/(admin)/routing'
import { Route as adminMeetingImport } from './routes/(admin)/meeting'
import { Route as adminIntegrationAppsImport } from './routes/(admin)/integration-apps'
import { Route as adminEventTypeImport } from './routes/(admin)/event-type'
import { Route as adminContactImport } from './routes/(admin)/contact'
import { Route as adminAvailabilityImport } from './routes/(admin)/availability'
import { Route as adminAnalyticsImport } from './routes/(admin)/analytics'
import { Route as adminAdminCenterImport } from './routes/(admin)/admin-center'
import { Route as adminAdminImport } from './routes/(admin)/admin'
import { Route as userUserEmailVerificationImport } from './routes/(user)/user.email-verification'
import { Route as userUserChangePasswordImport } from './routes/(user)/user.change-password'
import { Route as userUserChangeEmailImport } from './routes/(user)/user.change-email'
import { Route as userUserAccountSettingsImport } from './routes/(user)/user.account-settings'
import { Route as adminAdminUserManagementImport } from './routes/(admin)/admin.user-management'
import { Route as adminAdminDashboardImport } from './routes/(admin)/admin.dashboard'

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignUpRoute = AuthSignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSignInRoute = AuthSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRoute,
} as any)

const userUserRoute = userUserImport.update({
  id: '/(user)/user',
  path: '/user',
  getParentRoute: () => rootRoute,
} as any)

const adminWorkflowsRoute = adminWorkflowsImport.update({
  id: '/(admin)/workflows',
  path: '/workflows',
  getParentRoute: () => rootRoute,
} as any)

const adminRoutingRoute = adminRoutingImport.update({
  id: '/(admin)/routing',
  path: '/routing',
  getParentRoute: () => rootRoute,
} as any)

const adminMeetingRoute = adminMeetingImport.update({
  id: '/(admin)/meeting',
  path: '/meeting',
  getParentRoute: () => rootRoute,
} as any)

const adminIntegrationAppsRoute = adminIntegrationAppsImport.update({
  id: '/(admin)/integration-apps',
  path: '/integration-apps',
  getParentRoute: () => rootRoute,
} as any)

const adminEventTypeRoute = adminEventTypeImport.update({
  id: '/(admin)/event-type',
  path: '/event-type',
  getParentRoute: () => rootRoute,
} as any)

const adminContactRoute = adminContactImport.update({
  id: '/(admin)/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const adminAvailabilityRoute = adminAvailabilityImport.update({
  id: '/(admin)/availability',
  path: '/availability',
  getParentRoute: () => rootRoute,
} as any)

const adminAnalyticsRoute = adminAnalyticsImport.update({
  id: '/(admin)/analytics',
  path: '/analytics',
  getParentRoute: () => rootRoute,
} as any)

const adminAdminCenterRoute = adminAdminCenterImport.update({
  id: '/(admin)/admin-center',
  path: '/admin-center',
  getParentRoute: () => rootRoute,
} as any)

const adminAdminRoute = adminAdminImport.update({
  id: '/(admin)/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const userUserEmailVerificationRoute = userUserEmailVerificationImport.update({
  id: '/email-verification',
  path: '/email-verification',
  getParentRoute: () => userUserRoute,
} as any)

const userUserChangePasswordRoute = userUserChangePasswordImport.update({
  id: '/change-password',
  path: '/change-password',
  getParentRoute: () => userUserRoute,
} as any)

const userUserChangeEmailRoute = userUserChangeEmailImport.update({
  id: '/change-email',
  path: '/change-email',
  getParentRoute: () => userUserRoute,
} as any)

const userUserAccountSettingsRoute = userUserAccountSettingsImport.update({
  id: '/account-settings',
  path: '/account-settings',
  getParentRoute: () => userUserRoute,
} as any)

const adminAdminUserManagementRoute = adminAdminUserManagementImport.update({
  id: '/user-management',
  path: '/user-management',
  getParentRoute: () => adminAdminRoute,
} as any)

const adminAdminDashboardRoute = adminAdminDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => adminAdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/(admin)/admin': {
      id: '/(admin)/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof adminAdminImport
      parentRoute: typeof rootRoute
    }
    '/(admin)/admin-center': {
      id: '/(admin)/admin-center'
      path: '/admin-center'
      fullPath: '/admin-center'
      preLoaderRoute: typeof adminAdminCenterImport
      parentRoute: typeof rootRoute
    }
    '/(admin)/analytics': {
      id: '/(admin)/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof adminAnalyticsImport
      parentRoute: typeof rootRoute
    }
    '/(admin)/availability': {
      id: '/(admin)/availability'
      path: '/availability'
      fullPath: '/availability'
      preLoaderRoute: typeof adminAvailabilityImport
      parentRoute: typeof rootRoute
    }
    '/(admin)/contact': {
      id: '/(admin)/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof adminContactImport
      parentRoute: typeof rootRoute
    }
    '/(admin)/event-type': {
      id: '/(admin)/event-type'
      path: '/event-type'
      fullPath: '/event-type'
      preLoaderRoute: typeof adminEventTypeImport
      parentRoute: typeof rootRoute
    }
    '/(admin)/integration-apps': {
      id: '/(admin)/integration-apps'
      path: '/integration-apps'
      fullPath: '/integration-apps'
      preLoaderRoute: typeof adminIntegrationAppsImport
      parentRoute: typeof rootRoute
    }
    '/(admin)/meeting': {
      id: '/(admin)/meeting'
      path: '/meeting'
      fullPath: '/meeting'
      preLoaderRoute: typeof adminMeetingImport
      parentRoute: typeof rootRoute
    }
    '/(admin)/routing': {
      id: '/(admin)/routing'
      path: '/routing'
      fullPath: '/routing'
      preLoaderRoute: typeof adminRoutingImport
      parentRoute: typeof rootRoute
    }
    '/(admin)/workflows': {
      id: '/(admin)/workflows'
      path: '/workflows'
      fullPath: '/workflows'
      preLoaderRoute: typeof adminWorkflowsImport
      parentRoute: typeof rootRoute
    }
    '/(user)/user': {
      id: '/(user)/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof userUserImport
      parentRoute: typeof rootRoute
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInImport
      parentRoute: typeof AuthImport
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpImport
      parentRoute: typeof AuthImport
    }
    '/(admin)/admin/dashboard': {
      id: '/(admin)/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof adminAdminDashboardImport
      parentRoute: typeof adminAdminImport
    }
    '/(admin)/admin/user-management': {
      id: '/(admin)/admin/user-management'
      path: '/user-management'
      fullPath: '/admin/user-management'
      preLoaderRoute: typeof adminAdminUserManagementImport
      parentRoute: typeof adminAdminImport
    }
    '/(user)/user/account-settings': {
      id: '/(user)/user/account-settings'
      path: '/account-settings'
      fullPath: '/user/account-settings'
      preLoaderRoute: typeof userUserAccountSettingsImport
      parentRoute: typeof userUserImport
    }
    '/(user)/user/change-email': {
      id: '/(user)/user/change-email'
      path: '/change-email'
      fullPath: '/user/change-email'
      preLoaderRoute: typeof userUserChangeEmailImport
      parentRoute: typeof userUserImport
    }
    '/(user)/user/change-password': {
      id: '/(user)/user/change-password'
      path: '/change-password'
      fullPath: '/user/change-password'
      preLoaderRoute: typeof userUserChangePasswordImport
      parentRoute: typeof userUserImport
    }
    '/(user)/user/email-verification': {
      id: '/(user)/user/email-verification'
      path: '/email-verification'
      fullPath: '/user/email-verification'
      preLoaderRoute: typeof userUserEmailVerificationImport
      parentRoute: typeof userUserImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface adminAdminRouteChildren {
  adminAdminDashboardRoute: typeof adminAdminDashboardRoute
  adminAdminUserManagementRoute: typeof adminAdminUserManagementRoute
}

const adminAdminRouteChildren: adminAdminRouteChildren = {
  adminAdminDashboardRoute: adminAdminDashboardRoute,
  adminAdminUserManagementRoute: adminAdminUserManagementRoute,
}

const adminAdminRouteWithChildren = adminAdminRoute._addFileChildren(
  adminAdminRouteChildren,
)

interface userUserRouteChildren {
  userUserAccountSettingsRoute: typeof userUserAccountSettingsRoute
  userUserChangeEmailRoute: typeof userUserChangeEmailRoute
  userUserChangePasswordRoute: typeof userUserChangePasswordRoute
  userUserEmailVerificationRoute: typeof userUserEmailVerificationRoute
}

const userUserRouteChildren: userUserRouteChildren = {
  userUserAccountSettingsRoute: userUserAccountSettingsRoute,
  userUserChangeEmailRoute: userUserChangeEmailRoute,
  userUserChangePasswordRoute: userUserChangePasswordRoute,
  userUserEmailVerificationRoute: userUserEmailVerificationRoute,
}

const userUserRouteWithChildren = userUserRoute._addFileChildren(
  userUserRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/admin': typeof adminAdminRouteWithChildren
  '/admin-center': typeof adminAdminCenterRoute
  '/analytics': typeof adminAnalyticsRoute
  '/availability': typeof adminAvailabilityRoute
  '/contact': typeof adminContactRoute
  '/event-type': typeof adminEventTypeRoute
  '/integration-apps': typeof adminIntegrationAppsRoute
  '/meeting': typeof adminMeetingRoute
  '/routing': typeof adminRoutingRoute
  '/workflows': typeof adminWorkflowsRoute
  '/user': typeof userUserRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/admin/dashboard': typeof adminAdminDashboardRoute
  '/admin/user-management': typeof adminAdminUserManagementRoute
  '/user/account-settings': typeof userUserAccountSettingsRoute
  '/user/change-email': typeof userUserChangeEmailRoute
  '/user/change-password': typeof userUserChangePasswordRoute
  '/user/email-verification': typeof userUserEmailVerificationRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/admin': typeof adminAdminRouteWithChildren
  '/admin-center': typeof adminAdminCenterRoute
  '/analytics': typeof adminAnalyticsRoute
  '/availability': typeof adminAvailabilityRoute
  '/contact': typeof adminContactRoute
  '/event-type': typeof adminEventTypeRoute
  '/integration-apps': typeof adminIntegrationAppsRoute
  '/meeting': typeof adminMeetingRoute
  '/routing': typeof adminRoutingRoute
  '/workflows': typeof adminWorkflowsRoute
  '/user': typeof userUserRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/admin/dashboard': typeof adminAdminDashboardRoute
  '/admin/user-management': typeof adminAdminUserManagementRoute
  '/user/account-settings': typeof userUserAccountSettingsRoute
  '/user/change-email': typeof userUserChangeEmailRoute
  '/user/change-password': typeof userUserChangePasswordRoute
  '/user/email-verification': typeof userUserEmailVerificationRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/(admin)/admin': typeof adminAdminRouteWithChildren
  '/(admin)/admin-center': typeof adminAdminCenterRoute
  '/(admin)/analytics': typeof adminAnalyticsRoute
  '/(admin)/availability': typeof adminAvailabilityRoute
  '/(admin)/contact': typeof adminContactRoute
  '/(admin)/event-type': typeof adminEventTypeRoute
  '/(admin)/integration-apps': typeof adminIntegrationAppsRoute
  '/(admin)/meeting': typeof adminMeetingRoute
  '/(admin)/routing': typeof adminRoutingRoute
  '/(admin)/workflows': typeof adminWorkflowsRoute
  '/(user)/user': typeof userUserRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/(admin)/admin/dashboard': typeof adminAdminDashboardRoute
  '/(admin)/admin/user-management': typeof adminAdminUserManagementRoute
  '/(user)/user/account-settings': typeof userUserAccountSettingsRoute
  '/(user)/user/change-email': typeof userUserChangeEmailRoute
  '/(user)/user/change-password': typeof userUserChangePasswordRoute
  '/(user)/user/email-verification': typeof userUserEmailVerificationRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/admin'
    | '/admin-center'
    | '/analytics'
    | '/availability'
    | '/contact'
    | '/event-type'
    | '/integration-apps'
    | '/meeting'
    | '/routing'
    | '/workflows'
    | '/user'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/admin/dashboard'
    | '/admin/user-management'
    | '/user/account-settings'
    | '/user/change-email'
    | '/user/change-password'
    | '/user/email-verification'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/admin'
    | '/admin-center'
    | '/analytics'
    | '/availability'
    | '/contact'
    | '/event-type'
    | '/integration-apps'
    | '/meeting'
    | '/routing'
    | '/workflows'
    | '/user'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/admin/dashboard'
    | '/admin/user-management'
    | '/user/account-settings'
    | '/user/change-email'
    | '/user/change-password'
    | '/user/email-verification'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/(admin)/admin'
    | '/(admin)/admin-center'
    | '/(admin)/analytics'
    | '/(admin)/availability'
    | '/(admin)/contact'
    | '/(admin)/event-type'
    | '/(admin)/integration-apps'
    | '/(admin)/meeting'
    | '/(admin)/routing'
    | '/(admin)/workflows'
    | '/(user)/user'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/(admin)/admin/dashboard'
    | '/(admin)/admin/user-management'
    | '/(user)/user/account-settings'
    | '/(user)/user/change-email'
    | '/(user)/user/change-password'
    | '/(user)/user/email-verification'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  adminAdminRoute: typeof adminAdminRouteWithChildren
  adminAdminCenterRoute: typeof adminAdminCenterRoute
  adminAnalyticsRoute: typeof adminAnalyticsRoute
  adminAvailabilityRoute: typeof adminAvailabilityRoute
  adminContactRoute: typeof adminContactRoute
  adminEventTypeRoute: typeof adminEventTypeRoute
  adminIntegrationAppsRoute: typeof adminIntegrationAppsRoute
  adminMeetingRoute: typeof adminMeetingRoute
  adminRoutingRoute: typeof adminRoutingRoute
  adminWorkflowsRoute: typeof adminWorkflowsRoute
  userUserRoute: typeof userUserRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  adminAdminRoute: adminAdminRouteWithChildren,
  adminAdminCenterRoute: adminAdminCenterRoute,
  adminAnalyticsRoute: adminAnalyticsRoute,
  adminAvailabilityRoute: adminAvailabilityRoute,
  adminContactRoute: adminContactRoute,
  adminEventTypeRoute: adminEventTypeRoute,
  adminIntegrationAppsRoute: adminIntegrationAppsRoute,
  adminMeetingRoute: adminMeetingRoute,
  adminRoutingRoute: adminRoutingRoute,
  adminWorkflowsRoute: adminWorkflowsRoute,
  userUserRoute: userUserRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/(admin)/admin",
        "/(admin)/admin-center",
        "/(admin)/analytics",
        "/(admin)/availability",
        "/(admin)/contact",
        "/(admin)/event-type",
        "/(admin)/integration-apps",
        "/(admin)/meeting",
        "/(admin)/routing",
        "/(admin)/workflows",
        "/(user)/user"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/sign-in",
        "/auth/sign-up"
      ]
    },
    "/(admin)/admin": {
      "filePath": "(admin)/admin.tsx",
      "children": [
        "/(admin)/admin/dashboard",
        "/(admin)/admin/user-management"
      ]
    },
    "/(admin)/admin-center": {
      "filePath": "(admin)/admin-center.tsx"
    },
    "/(admin)/analytics": {
      "filePath": "(admin)/analytics.tsx"
    },
    "/(admin)/availability": {
      "filePath": "(admin)/availability.tsx"
    },
    "/(admin)/contact": {
      "filePath": "(admin)/contact.tsx"
    },
    "/(admin)/event-type": {
      "filePath": "(admin)/event-type.tsx"
    },
    "/(admin)/integration-apps": {
      "filePath": "(admin)/integration-apps.tsx"
    },
    "/(admin)/meeting": {
      "filePath": "(admin)/meeting.tsx"
    },
    "/(admin)/routing": {
      "filePath": "(admin)/routing.tsx"
    },
    "/(admin)/workflows": {
      "filePath": "(admin)/workflows.tsx"
    },
    "/(user)/user": {
      "filePath": "(user)/user.tsx",
      "children": [
        "/(user)/user/account-settings",
        "/(user)/user/change-email",
        "/(user)/user/change-password",
        "/(user)/user/email-verification"
      ]
    },
    "/auth/sign-in": {
      "filePath": "auth.sign-in.tsx",
      "parent": "/auth"
    },
    "/auth/sign-up": {
      "filePath": "auth.sign-up.tsx",
      "parent": "/auth"
    },
    "/(admin)/admin/dashboard": {
      "filePath": "(admin)/admin.dashboard.tsx",
      "parent": "/(admin)/admin"
    },
    "/(admin)/admin/user-management": {
      "filePath": "(admin)/admin.user-management.tsx",
      "parent": "/(admin)/admin"
    },
    "/(user)/user/account-settings": {
      "filePath": "(user)/user.account-settings.tsx",
      "parent": "/(user)/user"
    },
    "/(user)/user/change-email": {
      "filePath": "(user)/user.change-email.tsx",
      "parent": "/(user)/user"
    },
    "/(user)/user/change-password": {
      "filePath": "(user)/user.change-password.tsx",
      "parent": "/(user)/user"
    },
    "/(user)/user/email-verification": {
      "filePath": "(user)/user.email-verification.tsx",
      "parent": "/(user)/user"
    }
  }
}
ROUTE_MANIFEST_END */
