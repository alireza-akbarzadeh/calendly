/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WorkflowsImport } from './routes/workflows'
import { Route as UserImport } from './routes/user'
import { Route as RoutingImport } from './routes/routing'
import { Route as MeetingImport } from './routes/meeting'
import { Route as IntegrationAppsImport } from './routes/integration-apps'
import { Route as EventTypeImport } from './routes/event-type'
import { Route as ContactImport } from './routes/contact'
import { Route as AvailabilityImport } from './routes/availability'
import { Route as AuthImport } from './routes/auth'
import { Route as AnalyticsImport } from './routes/analytics'
import { Route as AdminCenterImport } from './routes/admin-center'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as UserEmailVerificationImport } from './routes/user.email-verification'
import { Route as UserChangePasswordImport } from './routes/user.change-password'
import { Route as UserChangeEmailImport } from './routes/user.change-email'
import { Route as UserAccountSettingsImport } from './routes/user.account-settings'
import { Route as AuthSignUpImport } from './routes/auth.sign-up'
import { Route as AuthSignInImport } from './routes/auth.sign-in'
import { Route as AdminUserManagementImport } from './routes/admin.user-management'
import { Route as AdminDashboardImport } from './routes/admin.dashboard'
import { Route as examplesExampleFormImport } from './routes/(examples)/example-form'

// Create/Update Routes

const WorkflowsRoute = WorkflowsImport.update({
  id: '/workflows',
  path: '/workflows',
  getParentRoute: () => rootRoute,
} as any)

const UserRoute = UserImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRoute,
} as any)

const RoutingRoute = RoutingImport.update({
  id: '/routing',
  path: '/routing',
  getParentRoute: () => rootRoute,
} as any)

const MeetingRoute = MeetingImport.update({
  id: '/meeting',
  path: '/meeting',
  getParentRoute: () => rootRoute,
} as any)

const IntegrationAppsRoute = IntegrationAppsImport.update({
  id: '/integration-apps',
  path: '/integration-apps',
  getParentRoute: () => rootRoute,
} as any)

const EventTypeRoute = EventTypeImport.update({
  id: '/event-type',
  path: '/event-type',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const AvailabilityRoute = AvailabilityImport.update({
  id: '/availability',
  path: '/availability',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AnalyticsRoute = AnalyticsImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => rootRoute,
} as any)

const AdminCenterRoute = AdminCenterImport.update({
  id: '/admin-center',
  path: '/admin-center',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserEmailVerificationRoute = UserEmailVerificationImport.update({
  id: '/email-verification',
  path: '/email-verification',
  getParentRoute: () => UserRoute,
} as any)

const UserChangePasswordRoute = UserChangePasswordImport.update({
  id: '/change-password',
  path: '/change-password',
  getParentRoute: () => UserRoute,
} as any)

const UserChangeEmailRoute = UserChangeEmailImport.update({
  id: '/change-email',
  path: '/change-email',
  getParentRoute: () => UserRoute,
} as any)

const UserAccountSettingsRoute = UserAccountSettingsImport.update({
  id: '/account-settings',
  path: '/account-settings',
  getParentRoute: () => UserRoute,
} as any)

const AuthSignUpRoute = AuthSignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSignInRoute = AuthSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRoute,
} as any)

const AdminUserManagementRoute = AdminUserManagementImport.update({
  id: '/user-management',
  path: '/user-management',
  getParentRoute: () => AdminRoute,
} as any)

const AdminDashboardRoute = AdminDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)

const examplesExampleFormRoute = examplesExampleFormImport.update({
  id: '/(examples)/example-form',
  path: '/example-form',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/admin-center': {
      id: '/admin-center'
      path: '/admin-center'
      fullPath: '/admin-center'
      preLoaderRoute: typeof AdminCenterImport
      parentRoute: typeof rootRoute
    }
    '/analytics': {
      id: '/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/availability': {
      id: '/availability'
      path: '/availability'
      fullPath: '/availability'
      preLoaderRoute: typeof AvailabilityImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/event-type': {
      id: '/event-type'
      path: '/event-type'
      fullPath: '/event-type'
      preLoaderRoute: typeof EventTypeImport
      parentRoute: typeof rootRoute
    }
    '/integration-apps': {
      id: '/integration-apps'
      path: '/integration-apps'
      fullPath: '/integration-apps'
      preLoaderRoute: typeof IntegrationAppsImport
      parentRoute: typeof rootRoute
    }
    '/meeting': {
      id: '/meeting'
      path: '/meeting'
      fullPath: '/meeting'
      preLoaderRoute: typeof MeetingImport
      parentRoute: typeof rootRoute
    }
    '/routing': {
      id: '/routing'
      path: '/routing'
      fullPath: '/routing'
      preLoaderRoute: typeof RoutingImport
      parentRoute: typeof rootRoute
    }
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserImport
      parentRoute: typeof rootRoute
    }
    '/workflows': {
      id: '/workflows'
      path: '/workflows'
      fullPath: '/workflows'
      preLoaderRoute: typeof WorkflowsImport
      parentRoute: typeof rootRoute
    }
    '/(examples)/example-form': {
      id: '/(examples)/example-form'
      path: '/example-form'
      fullPath: '/example-form'
      preLoaderRoute: typeof examplesExampleFormImport
      parentRoute: typeof rootRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardImport
      parentRoute: typeof AdminImport
    }
    '/admin/user-management': {
      id: '/admin/user-management'
      path: '/user-management'
      fullPath: '/admin/user-management'
      preLoaderRoute: typeof AdminUserManagementImport
      parentRoute: typeof AdminImport
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInImport
      parentRoute: typeof AuthImport
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpImport
      parentRoute: typeof AuthImport
    }
    '/user/account-settings': {
      id: '/user/account-settings'
      path: '/account-settings'
      fullPath: '/user/account-settings'
      preLoaderRoute: typeof UserAccountSettingsImport
      parentRoute: typeof UserImport
    }
    '/user/change-email': {
      id: '/user/change-email'
      path: '/change-email'
      fullPath: '/user/change-email'
      preLoaderRoute: typeof UserChangeEmailImport
      parentRoute: typeof UserImport
    }
    '/user/change-password': {
      id: '/user/change-password'
      path: '/change-password'
      fullPath: '/user/change-password'
      preLoaderRoute: typeof UserChangePasswordImport
      parentRoute: typeof UserImport
    }
    '/user/email-verification': {
      id: '/user/email-verification'
      path: '/email-verification'
      fullPath: '/user/email-verification'
      preLoaderRoute: typeof UserEmailVerificationImport
      parentRoute: typeof UserImport
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminUserManagementRoute: typeof AdminUserManagementRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminDashboardRoute: AdminDashboardRoute,
  AdminUserManagementRoute: AdminUserManagementRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface AuthRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface UserRouteChildren {
  UserAccountSettingsRoute: typeof UserAccountSettingsRoute
  UserChangeEmailRoute: typeof UserChangeEmailRoute
  UserChangePasswordRoute: typeof UserChangePasswordRoute
  UserEmailVerificationRoute: typeof UserEmailVerificationRoute
}

const UserRouteChildren: UserRouteChildren = {
  UserAccountSettingsRoute: UserAccountSettingsRoute,
  UserChangeEmailRoute: UserChangeEmailRoute,
  UserChangePasswordRoute: UserChangePasswordRoute,
  UserEmailVerificationRoute: UserEmailVerificationRoute,
}

const UserRouteWithChildren = UserRoute._addFileChildren(UserRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin-center': typeof AdminCenterRoute
  '/analytics': typeof AnalyticsRoute
  '/auth': typeof AuthRouteWithChildren
  '/availability': typeof AvailabilityRoute
  '/contact': typeof ContactRoute
  '/event-type': typeof EventTypeRoute
  '/integration-apps': typeof IntegrationAppsRoute
  '/meeting': typeof MeetingRoute
  '/routing': typeof RoutingRoute
  '/user': typeof UserRouteWithChildren
  '/workflows': typeof WorkflowsRoute
  '/example-form': typeof examplesExampleFormRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/user-management': typeof AdminUserManagementRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/user/account-settings': typeof UserAccountSettingsRoute
  '/user/change-email': typeof UserChangeEmailRoute
  '/user/change-password': typeof UserChangePasswordRoute
  '/user/email-verification': typeof UserEmailVerificationRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin-center': typeof AdminCenterRoute
  '/analytics': typeof AnalyticsRoute
  '/auth': typeof AuthRouteWithChildren
  '/availability': typeof AvailabilityRoute
  '/contact': typeof ContactRoute
  '/event-type': typeof EventTypeRoute
  '/integration-apps': typeof IntegrationAppsRoute
  '/meeting': typeof MeetingRoute
  '/routing': typeof RoutingRoute
  '/user': typeof UserRouteWithChildren
  '/workflows': typeof WorkflowsRoute
  '/example-form': typeof examplesExampleFormRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/user-management': typeof AdminUserManagementRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/user/account-settings': typeof UserAccountSettingsRoute
  '/user/change-email': typeof UserChangeEmailRoute
  '/user/change-password': typeof UserChangePasswordRoute
  '/user/email-verification': typeof UserEmailVerificationRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin-center': typeof AdminCenterRoute
  '/analytics': typeof AnalyticsRoute
  '/auth': typeof AuthRouteWithChildren
  '/availability': typeof AvailabilityRoute
  '/contact': typeof ContactRoute
  '/event-type': typeof EventTypeRoute
  '/integration-apps': typeof IntegrationAppsRoute
  '/meeting': typeof MeetingRoute
  '/routing': typeof RoutingRoute
  '/user': typeof UserRouteWithChildren
  '/workflows': typeof WorkflowsRoute
  '/(examples)/example-form': typeof examplesExampleFormRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/user-management': typeof AdminUserManagementRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/user/account-settings': typeof UserAccountSettingsRoute
  '/user/change-email': typeof UserChangeEmailRoute
  '/user/change-password': typeof UserChangePasswordRoute
  '/user/email-verification': typeof UserEmailVerificationRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/admin-center'
    | '/analytics'
    | '/auth'
    | '/availability'
    | '/contact'
    | '/event-type'
    | '/integration-apps'
    | '/meeting'
    | '/routing'
    | '/user'
    | '/workflows'
    | '/example-form'
    | '/admin/dashboard'
    | '/admin/user-management'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/user/account-settings'
    | '/user/change-email'
    | '/user/change-password'
    | '/user/email-verification'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/admin-center'
    | '/analytics'
    | '/auth'
    | '/availability'
    | '/contact'
    | '/event-type'
    | '/integration-apps'
    | '/meeting'
    | '/routing'
    | '/user'
    | '/workflows'
    | '/example-form'
    | '/admin/dashboard'
    | '/admin/user-management'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/user/account-settings'
    | '/user/change-email'
    | '/user/change-password'
    | '/user/email-verification'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/admin-center'
    | '/analytics'
    | '/auth'
    | '/availability'
    | '/contact'
    | '/event-type'
    | '/integration-apps'
    | '/meeting'
    | '/routing'
    | '/user'
    | '/workflows'
    | '/(examples)/example-form'
    | '/admin/dashboard'
    | '/admin/user-management'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/user/account-settings'
    | '/user/change-email'
    | '/user/change-password'
    | '/user/email-verification'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  AdminCenterRoute: typeof AdminCenterRoute
  AnalyticsRoute: typeof AnalyticsRoute
  AuthRoute: typeof AuthRouteWithChildren
  AvailabilityRoute: typeof AvailabilityRoute
  ContactRoute: typeof ContactRoute
  EventTypeRoute: typeof EventTypeRoute
  IntegrationAppsRoute: typeof IntegrationAppsRoute
  MeetingRoute: typeof MeetingRoute
  RoutingRoute: typeof RoutingRoute
  UserRoute: typeof UserRouteWithChildren
  WorkflowsRoute: typeof WorkflowsRoute
  examplesExampleFormRoute: typeof examplesExampleFormRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  AdminCenterRoute: AdminCenterRoute,
  AnalyticsRoute: AnalyticsRoute,
  AuthRoute: AuthRouteWithChildren,
  AvailabilityRoute: AvailabilityRoute,
  ContactRoute: ContactRoute,
  EventTypeRoute: EventTypeRoute,
  IntegrationAppsRoute: IntegrationAppsRoute,
  MeetingRoute: MeetingRoute,
  RoutingRoute: RoutingRoute,
  UserRoute: UserRouteWithChildren,
  WorkflowsRoute: WorkflowsRoute,
  examplesExampleFormRoute: examplesExampleFormRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/admin-center",
        "/analytics",
        "/auth",
        "/availability",
        "/contact",
        "/event-type",
        "/integration-apps",
        "/meeting",
        "/routing",
        "/user",
        "/workflows",
        "/(examples)/example-form"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/dashboard",
        "/admin/user-management"
      ]
    },
    "/admin-center": {
      "filePath": "admin-center.tsx"
    },
    "/analytics": {
      "filePath": "analytics.ts"
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/sign-in",
        "/auth/sign-up"
      ]
    },
    "/availability": {
      "filePath": "availability.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/event-type": {
      "filePath": "event-type.tsx"
    },
    "/integration-apps": {
      "filePath": "integration-apps.tsx"
    },
    "/meeting": {
      "filePath": "meeting.tsx"
    },
    "/routing": {
      "filePath": "routing.tsx"
    },
    "/user": {
      "filePath": "user.tsx",
      "children": [
        "/user/account-settings",
        "/user/change-email",
        "/user/change-password",
        "/user/email-verification"
      ]
    },
    "/workflows": {
      "filePath": "workflows.tsx"
    },
    "/(examples)/example-form": {
      "filePath": "(examples)/example-form.tsx"
    },
    "/admin/dashboard": {
      "filePath": "admin.dashboard.tsx",
      "parent": "/admin"
    },
    "/admin/user-management": {
      "filePath": "admin.user-management.tsx",
      "parent": "/admin"
    },
    "/auth/sign-in": {
      "filePath": "auth.sign-in.tsx",
      "parent": "/auth"
    },
    "/auth/sign-up": {
      "filePath": "auth.sign-up.tsx",
      "parent": "/auth"
    },
    "/user/account-settings": {
      "filePath": "user.account-settings.tsx",
      "parent": "/user"
    },
    "/user/change-email": {
      "filePath": "user.change-email.tsx",
      "parent": "/user"
    },
    "/user/change-password": {
      "filePath": "user.change-password.tsx",
      "parent": "/user"
    },
    "/user/email-verification": {
      "filePath": "user.email-verification.tsx",
      "parent": "/user"
    }
  }
}
ROUTE_MANIFEST_END */
