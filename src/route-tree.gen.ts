/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/root'
import { Route as appProtectedUserLayoutImport } from './routes/app/protected/user/_layout'
import { Route as appProtectedAdminLayoutImport } from './routes/app/protected/admin/_layout'
import { Route as appAuthLayoutImport } from './routes/app/auth/_layout'
import { Route as appIndexImport } from './routes/app/_index'
import { Route as appAuthSignUpImport } from './routes/app/auth/sign-up'
import { Route as appAuthSignInImport } from './routes/app/auth/sign-in'
import { Route as appProtectedUserProfileImport } from './routes/app/protected/user/profile'
import { Route as appProtectedUserAccountSettingsImport } from './routes/app/protected/user/account-settings'
import { Route as appProtectedAdminUserManagementImport } from './routes/app/protected/admin/user-management'
import { Route as appProtectedAdminDashboardImport } from './routes/app/protected/admin/dashboard'

// Create/Update Routes

const appProtectedUserLayoutRoute = appProtectedUserLayoutImport.update({
  id: '/_protected-user',
  getParentRoute: () => rootRoute,
} as any)

const appProtectedAdminLayoutRoute = appProtectedAdminLayoutImport.update({
  id: '/_protected-admin',
  getParentRoute: () => rootRoute,
} as any)

const appAuthLayoutRoute = appAuthLayoutImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const appIndexRoute = appIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const appAuthSignUpRoute = appAuthSignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => appAuthLayoutRoute,
} as any)

const appAuthSignInRoute = appAuthSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => appAuthLayoutRoute,
} as any)

const appProtectedUserProfileRoute = appProtectedUserProfileImport.update({
  id: '/user/profile',
  path: '/user/profile',
  getParentRoute: () => appProtectedUserLayoutRoute,
} as any)

const appProtectedUserAccountSettingsRoute =
  appProtectedUserAccountSettingsImport.update({
    id: '/user/account-settings',
    path: '/user/account-settings',
    getParentRoute: () => appProtectedUserLayoutRoute,
  } as any)

const appProtectedAdminUserManagementRoute =
  appProtectedAdminUserManagementImport.update({
    id: '/admin/user-management',
    path: '/admin/user-management',
    getParentRoute: () => appProtectedAdminLayoutRoute,
  } as any)

const appProtectedAdminDashboardRoute = appProtectedAdminDashboardImport.update(
  {
    id: '/admin/dashboard',
    path: '/admin/dashboard',
    getParentRoute: () => appProtectedAdminLayoutRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof appAuthLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_protected-admin': {
      id: '/_protected-admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof appProtectedAdminLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_protected-user': {
      id: '/_protected-user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof appProtectedUserLayoutImport
      parentRoute: typeof rootRoute
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof appAuthSignInImport
      parentRoute: typeof appAuthLayoutImport
    }
    '/_auth/sign-up': {
      id: '/_auth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof appAuthSignUpImport
      parentRoute: typeof appAuthLayoutImport
    }
    '/_protected-admin/admin/dashboard': {
      id: '/_protected-admin/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof appProtectedAdminDashboardImport
      parentRoute: typeof appProtectedAdminLayoutImport
    }
    '/_protected-admin/admin/user-management': {
      id: '/_protected-admin/admin/user-management'
      path: '/admin/user-management'
      fullPath: '/admin/user-management'
      preLoaderRoute: typeof appProtectedAdminUserManagementImport
      parentRoute: typeof appProtectedAdminLayoutImport
    }
    '/_protected-user/user/account-settings': {
      id: '/_protected-user/user/account-settings'
      path: '/user/account-settings'
      fullPath: '/user/account-settings'
      preLoaderRoute: typeof appProtectedUserAccountSettingsImport
      parentRoute: typeof appProtectedUserLayoutImport
    }
    '/_protected-user/user/profile': {
      id: '/_protected-user/user/profile'
      path: '/user/profile'
      fullPath: '/user/profile'
      preLoaderRoute: typeof appProtectedUserProfileImport
      parentRoute: typeof appProtectedUserLayoutImport
    }
  }
}

// Create and export the route tree

interface appAuthLayoutRouteChildren {
  appAuthSignInRoute: typeof appAuthSignInRoute
  appAuthSignUpRoute: typeof appAuthSignUpRoute
}

const appAuthLayoutRouteChildren: appAuthLayoutRouteChildren = {
  appAuthSignInRoute: appAuthSignInRoute,
  appAuthSignUpRoute: appAuthSignUpRoute,
}

const appAuthLayoutRouteWithChildren = appAuthLayoutRoute._addFileChildren(
  appAuthLayoutRouteChildren,
)

interface appProtectedAdminLayoutRouteChildren {
  appProtectedAdminDashboardRoute: typeof appProtectedAdminDashboardRoute
  appProtectedAdminUserManagementRoute: typeof appProtectedAdminUserManagementRoute
}

const appProtectedAdminLayoutRouteChildren: appProtectedAdminLayoutRouteChildren =
  {
    appProtectedAdminDashboardRoute: appProtectedAdminDashboardRoute,
    appProtectedAdminUserManagementRoute: appProtectedAdminUserManagementRoute,
  }

const appProtectedAdminLayoutRouteWithChildren =
  appProtectedAdminLayoutRoute._addFileChildren(
    appProtectedAdminLayoutRouteChildren,
  )

interface appProtectedUserLayoutRouteChildren {
  appProtectedUserAccountSettingsRoute: typeof appProtectedUserAccountSettingsRoute
  appProtectedUserProfileRoute: typeof appProtectedUserProfileRoute
}

const appProtectedUserLayoutRouteChildren: appProtectedUserLayoutRouteChildren =
  {
    appProtectedUserAccountSettingsRoute: appProtectedUserAccountSettingsRoute,
    appProtectedUserProfileRoute: appProtectedUserProfileRoute,
  }

const appProtectedUserLayoutRouteWithChildren =
  appProtectedUserLayoutRoute._addFileChildren(
    appProtectedUserLayoutRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof appIndexRoute
  '': typeof appProtectedUserLayoutRouteWithChildren
  '/sign-in': typeof appAuthSignInRoute
  '/sign-up': typeof appAuthSignUpRoute
  '/admin/dashboard': typeof appProtectedAdminDashboardRoute
  '/admin/user-management': typeof appProtectedAdminUserManagementRoute
  '/user/account-settings': typeof appProtectedUserAccountSettingsRoute
  '/user/profile': typeof appProtectedUserProfileRoute
}

export interface FileRoutesByTo {
  '/': typeof appIndexRoute
  '': typeof appProtectedUserLayoutRouteWithChildren
  '/sign-in': typeof appAuthSignInRoute
  '/sign-up': typeof appAuthSignUpRoute
  '/admin/dashboard': typeof appProtectedAdminDashboardRoute
  '/admin/user-management': typeof appProtectedAdminUserManagementRoute
  '/user/account-settings': typeof appProtectedUserAccountSettingsRoute
  '/user/profile': typeof appProtectedUserProfileRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof appIndexRoute
  '/_auth': typeof appAuthLayoutRouteWithChildren
  '/_protected-admin': typeof appProtectedAdminLayoutRouteWithChildren
  '/_protected-user': typeof appProtectedUserLayoutRouteWithChildren
  '/_auth/sign-in': typeof appAuthSignInRoute
  '/_auth/sign-up': typeof appAuthSignUpRoute
  '/_protected-admin/admin/dashboard': typeof appProtectedAdminDashboardRoute
  '/_protected-admin/admin/user-management': typeof appProtectedAdminUserManagementRoute
  '/_protected-user/user/account-settings': typeof appProtectedUserAccountSettingsRoute
  '/_protected-user/user/profile': typeof appProtectedUserProfileRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/sign-in'
    | '/sign-up'
    | '/admin/dashboard'
    | '/admin/user-management'
    | '/user/account-settings'
    | '/user/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/sign-in'
    | '/sign-up'
    | '/admin/dashboard'
    | '/admin/user-management'
    | '/user/account-settings'
    | '/user/profile'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_protected-admin'
    | '/_protected-user'
    | '/_auth/sign-in'
    | '/_auth/sign-up'
    | '/_protected-admin/admin/dashboard'
    | '/_protected-admin/admin/user-management'
    | '/_protected-user/user/account-settings'
    | '/_protected-user/user/profile'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  appIndexRoute: typeof appIndexRoute
  appAuthLayoutRoute: typeof appAuthLayoutRouteWithChildren
  appProtectedAdminLayoutRoute: typeof appProtectedAdminLayoutRouteWithChildren
  appProtectedUserLayoutRoute: typeof appProtectedUserLayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  appIndexRoute: appIndexRoute,
  appAuthLayoutRoute: appAuthLayoutRouteWithChildren,
  appProtectedAdminLayoutRoute: appProtectedAdminLayoutRouteWithChildren,
  appProtectedUserLayoutRoute: appProtectedUserLayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_protected-admin",
        "/_protected-user"
      ]
    },
    "/": {
      "filePath": "app/_index.tsx"
    },
    "/_auth": {
      "filePath": "app/auth/_layout.tsx",
      "children": [
        "/_auth/sign-in",
        "/_auth/sign-up"
      ]
    },
    "/_protected-admin": {
      "filePath": "app/protected/admin/_layout.tsx",
      "children": [
        "/_protected-admin/admin/dashboard",
        "/_protected-admin/admin/user-management"
      ]
    },
    "/_protected-user": {
      "filePath": "app/protected/user/_layout.tsx",
      "children": [
        "/_protected-user/user/account-settings",
        "/_protected-user/user/profile"
      ]
    },
    "/_auth/sign-in": {
      "filePath": "app/auth/sign-in.tsx",
      "parent": "/_auth"
    },
    "/_auth/sign-up": {
      "filePath": "app/auth/sign-up.tsx",
      "parent": "/_auth"
    },
    "/_protected-admin/admin/dashboard": {
      "filePath": "app/protected/admin/dashboard.tsx",
      "parent": "/_protected-admin"
    },
    "/_protected-admin/admin/user-management": {
      "filePath": "app/protected/admin/user-management.tsx",
      "parent": "/_protected-admin"
    },
    "/_protected-user/user/account-settings": {
      "filePath": "app/protected/user/account-settings.tsx",
      "parent": "/_protected-user"
    },
    "/_protected-user/user/profile": {
      "filePath": "app/protected/user/profile.tsx",
      "parent": "/_protected-user"
    }
  }
}
ROUTE_MANIFEST_END */
